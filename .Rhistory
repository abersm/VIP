upper = "adjusted_upper_ci",
y_var = "study_label",
point_color_var = "is_meta",
point_color = c("#333333", "maroon3"),
x_axis_title = "Vaccine effectiveness (%)",
aspect_ratio = 0.75,
y_axis_labels = NULL,
) %>%
add_column_table(
right_cols = list("VE (95% CI)" = ".estimate_label"),
left_cols = list(Study = ".y_var"),
#left_args = list(label_hjust = "inward", label_vjust = 0.5)
left_args = list(label_hjust = 1)
)
plot_column_table <- function(
p,
cols = NULL,
header_face = "bold",
header_size = NULL,
header_color = "black",
header_hjust = NULL,
header_vjust = 0.5,
label_face = "plain",
label_size = NULL,
label_color = "black",
label_hjust = NULL,
label_vjust = 0.5,
label_parse = FALSE,
stripes = geom_stripes(direction = "horizontal"),
plot_margin = NULL) {
if (is.null(cols)) return(NULL)
plot_data <- p$data
col_names <- names(plot_data)
plot_theme <- p$theme
if (is.list(cols)) {
n <- length(cols)
col_headers <- names(cols) %||% rep_len("", length.out = n)
} else {
cols <- list(cols)
col_headers <- ""
n <- 1L
}
idx <- seq_len(n)
#if (!is.list(stripes)) {
#  stripes <- lapply(idx, function(i) stripes)
#}
if (is.null(stripes) || inherits(stripes, "ggproto")) {
stripes <- list(stripes)
}
stripes <- rep_len(stripes, length.out = n)
# Label style
label_size <- rep_len(label_size %||% plot_theme$axis.text.x$size %||% plot_theme$text$size, length.out = n)
label_face <- rep_len(label_face, length.out = n)
label_color <- rep_len(label_color, length.out = n)
label_hjust <- rep_len(label_hjust, length.out = n)
label_vjust <- rep_len(label_vjust, length.out = n)
# Header style
header_size <- rep_len(header_size %||% (label_size + 2L), length.out = n)
header_face <- rep_len(header_face, length.out = n)
header_color <- rep_len(header_color, length.out = n)
header_hjust <- rep_len(header_hjust, length.out = n)
header_vjust <- rep_len(header_vjust, length.out = n)
# Core plot features
plot_core <- ggplot2::ggplot(plot_data, ggplot2::aes(y = .data$.y_var)) + ggplot2::labs(y = NULL, x = "  ")
col_names <- names(plot_data)
plot_margin <- plot_margin %||% ggplot2::margin(t = 0, b = 0, l = 0, r = 0)
if (inherits(plot_margin, "margin")) {
plot_margin <- list(plot_margin)
}
plot_margin <- rep_len(plot_margin, length.out = n)
blank <- ggplot2::element_blank()
# Replace plot components with transparent form
replace_element_feature <- function(theme, component, feature = "colour") {
component <- intersect(names(theme), component)
for (i in component) {
z <- theme[[i]]
if (inherits(z, "element_blank") || match(feature, names(z), nomatch = 0L) == 0L) next
theme[[i]][[feature]] <- "transparent"
}
theme
}
plot_theme <- replace_element_feature(plot_theme, c("axis.line.x", "axis.ticks.x", "axis.title.x", "axis.text.x"))
plot_theme$axis.line.y <- plot_theme$axis.ticks.y <- plot_theme$axis.title.y <- plot_theme$axis.text.y <- blank
plot_theme$legend.position <- "none"
# Loop through inputs
label_parse <- rep_len(label_parse, length.out = n)
label_size <- label_size/.pt
lapply(idx, function(i) {
col <- .subset2(cols, i)
hjust <- label_hjust[i]
args <- list(
size = label_size[i],
hjust = hjust,
vjust = label_vjust[i],
color = label_color[i],
fontface = label_face[i],
parse = label_parse[i]
)
if (length(col) == 1L && any(col_names == col)) {
#args$mapping <- ggplot2::aes(y = .data$.y_var, x = 1, label = .data[[col]])
args$mapping <- ggplot2::aes(y = .data$.y_var, label = .data[[col]])
} else {
#args$mapping <- ggplot2::aes(y = .data$.y_var, x = 1)
args$mapping <- ggplot2::aes(y = .data$.y_var)
args$label <- col
}
plot_theme$plot.title <- ggplot2::element_text(
hjust = header_hjust[i],
vjust = header_vjust[i],
face = header_face[i],
size = header_size[i],
color = header_color[i]
)
x_scale <- ggplot2::scale_x_continuous(name = NULL, limits = c(0, 1), expand = c(0, 0, 0, 0))
args$x <- if (is.numeric(hjust)) {
if (hjust == 0) 0.05 else if (hjust == 1) 0.95 else 0.5
} else {
1
}
plot_theme$plot.margin <- plot_margin[[i]]
plot_table <- do.call(ggplot2::geom_text, args)
plot_core +
x_scale +
stripes[[i]] +
plot_table +
ggplot2::ggtitle(col_headers[i]) +
plot_theme
})
}
add_column_table <- function(
p,
...,
left_cols = NULL,
right_cols = NULL,
left_args = NULL,
right_args = NULL,
widths = NULL,
plot_margin = ggplot2::margin(t = 0, b = 0, r = 1, l = 1, unit = "pt")) {
args <- list(...)
if (...length() != 0L) {
modify_list <- function(old, new) {
old_names <- names(old)
new_names <- names(new)
new_names <- new_names[nzchar(new_names)]
for (i in new_names) {
old[[i]] <- if (i %in% old_names && is.list(.subset2(old, i)) && is.list(.subset2(new, i))) {
update_list(.subset2(old, i), .subset2(new, i))
} else {
.subset2(new, i)
}
}
old
}
# left_args/right_args takes priority over input to dots
left_args <- if (length(left_args) == 0L) args else modify_list(args, left_args)
right_args <- if (length(right_args) == 0L) args else modify_list(args, right_args)
}
left_args$label_hjust <- left_args$label_hjust %||% 1
left_args$header_hjust <- left_args$header_hjust %||% 0
right_args$label_hjust <- right_args$label_hjust %||% 0.5
right_args$header_hjust <- right_args$header_hjust %||% 0.5
p$theme$plot.margin <- plot_margin
left_args$p <- right_args$p <- p
left_args$cols <- left_cols
right_args$cols <- right_cols
right <- do.call(plot_column_table, right_args)
left <- do.call(plot_column_table, left_args)
#p$theme$plot.margin <- plot_margin
titles <- lapply(c(right, left), function(x) x$theme$plot.title)
titles <- titles[lengths(titles, use.names = FALSE) > 0L]
title_sizes <- vapply(titles, function(x) x$size %||% 0L, numeric(1), USE.NAMES = FALSE)
titles <- titles[[which.max(title_sizes)]]
if (is.null(p$theme$plot.title)) {
p$theme$plot.title <- titles
} else {
p$theme$plot.title$size <- titles$size
}
patchwork::wrap_plots(c(left, list(p), right), widths = widths)
}
# Example -----------------------------------------------------------------
df <- read_excel_sheets("meta-analysis template_pregnancy", merge = FALSE) %>%
lapply(function(x) {
names(x) <- clean_names(tolower(names(x)))
x
})
# Efficacy
df <- df$`Pregnancy RSV VE` %>%
meta_analyze_ve() %>%
meta2df() %>%
mutate(
study_label = factor(ifelse(is_meta, "Random effects", study_label)),
study_label = .fct_reorder(study_label, is_meta, .increasing = FALSE)
)
df %>%
plot_forest(
estimate = "adjusted_estimate",
lower = "adjusted_lower_ci",
upper = "adjusted_upper_ci",
y_var = "study_label",
point_color_var = "is_meta",
point_color = c("grey90", "maroon3"),
x_axis_title = "Vaccine effectiveness (%)",
aspect_ratio = 0.75
) %>%
add_column_table(right_cols = list("VE (95% CI)" = ".estimate_label"))
df %>%
plot_forest(
estimate = "adjusted_estimate",
lower = "adjusted_lower_ci",
upper = "adjusted_upper_ci",
y_var = "study_label",
point_color_var = "is_meta",
point_color = c("#333333", "maroon3"),
x_axis_title = "Vaccine effectiveness (%)",
aspect_ratio = 0.75,
y_axis_labels = NULL,
) %>%
add_column_table(
right_cols = list("VE (95% CI)" = ".estimate_label"),
left_cols = list(Study = ".y_var"),
#left_args = list(label_hjust = "inward", label_vjust = 0.5)
left_args = list(label_hjust = 1)
)
RM()
plot_column_table <- function(
p,
cols = NULL,
header_face = "bold",
header_size = NULL,
header_color = "black",
header_hjust = NULL,
header_vjust = 0.5,
label_face = "plain",
label_size = NULL,
label_color = "black",
label_hjust = NULL,
label_vjust = 0.5,
label_parse = FALSE,
stripes = geom_stripes(direction = "horizontal"),
plot_margin = NULL) {
if (is.null(cols)) return(NULL)
plot_data <- p$data
col_names <- names(plot_data)
plot_theme <- p$theme
if (is.list(cols)) {
n <- length(cols)
col_headers <- names(cols) %||% rep_len("", length.out = n)
} else {
cols <- list(cols)
col_headers <- ""
n <- 1L
}
idx <- seq_len(n)
#if (!is.list(stripes)) {
#  stripes <- lapply(idx, function(i) stripes)
#}
if (is.null(stripes) || inherits(stripes, "ggproto")) {
stripes <- list(stripes)
}
stripes <- rep_len(stripes, length.out = n)
# Label style
label_size <- rep_len(label_size %||% plot_theme$axis.text.x$size %||% plot_theme$text$size, length.out = n)
label_face <- rep_len(label_face, length.out = n)
label_color <- rep_len(label_color, length.out = n)
label_hjust <- rep_len(label_hjust, length.out = n)
label_vjust <- rep_len(label_vjust, length.out = n)
# Header style
header_size <- rep_len(header_size %||% (label_size + 2L), length.out = n)
header_face <- rep_len(header_face, length.out = n)
header_color <- rep_len(header_color, length.out = n)
header_hjust <- rep_len(header_hjust, length.out = n)
header_vjust <- rep_len(header_vjust, length.out = n)
# Core plot features
plot_core <- ggplot2::ggplot(plot_data, ggplot2::aes(y = .data$.y_var)) + ggplot2::labs(y = NULL, x = "  ")
col_names <- names(plot_data)
plot_margin <- plot_margin %||% ggplot2::margin(t = 0, b = 0, l = 0, r = 0)
if (inherits(plot_margin, "margin")) {
plot_margin <- list(plot_margin)
}
plot_margin <- rep_len(plot_margin, length.out = n)
blank <- ggplot2::element_blank()
# Replace plot components with transparent form
replace_element_feature <- function(theme, component, feature = "colour") {
component <- intersect(names(theme), component)
for (i in component) {
z <- theme[[i]]
if (inherits(z, "element_blank") || match(feature, names(z), nomatch = 0L) == 0L) next
theme[[i]][[feature]] <- "transparent"
}
theme
}
plot_theme <- replace_element_feature(plot_theme, c("axis.line.x", "axis.ticks.x", "axis.title.x", "axis.text.x"))
plot_theme$axis.line.y <- plot_theme$axis.ticks.y <- plot_theme$axis.title.y <- plot_theme$axis.text.y <- blank
plot_theme$legend.position <- "none"
# Loop through inputs
label_parse <- rep_len(label_parse, length.out = n)
label_size <- label_size/.pt
lapply(idx, function(i) {
col <- .subset2(cols, i)
hjust <- label_hjust[i]
args <- list(
size = label_size[i],
hjust = hjust,
vjust = label_vjust[i],
color = label_color[i],
fontface = label_face[i],
parse = label_parse[i]
)
if (length(col) == 1L && any(col_names == col)) {
#args$mapping <- ggplot2::aes(y = .data$.y_var, x = 1, label = .data[[col]])
args$mapping <- ggplot2::aes(y = .data$.y_var, label = .data[[col]])
} else {
#args$mapping <- ggplot2::aes(y = .data$.y_var, x = 1)
args$mapping <- ggplot2::aes(y = .data$.y_var)
args$label <- col
}
plot_theme$plot.title <- ggplot2::element_text(
hjust = header_hjust[i],
vjust = header_vjust[i],
face = header_face[i],
size = header_size[i],
color = header_color[i]
)
x_scale <- ggplot2::scale_x_continuous(name = NULL, limits = c(0, 1), expand = c(0, 0, 0, 0))
args$x <- if (is.numeric(hjust)) {
if (hjust == 0) 0.05 else if (hjust == 1) 0.95 else 0.5
} else {
1
}
plot_theme$plot.margin <- plot_margin[[i]]
plot_table <- do.call(ggplot2::geom_text, args)
plot_core +
x_scale +
stripes[[i]] +
plot_table +
ggplot2::ggtitle(col_headers[i]) +
plot_theme
})
}
add_column_table <- function(
p,
...,
left_cols = NULL,
right_cols = NULL,
left_args = NULL,
right_args = NULL,
widths = NULL,
plot_margin = ggplot2::margin(t = 0, b = 0, r = 1, l = 1, unit = "pt")) {
args <- list(...)
if (...length() != 0L) {
modify_list <- function(old, new) {
old_names <- names(old)
new_names <- names(new)
new_names <- new_names[nzchar(new_names)]
for (i in new_names) {
old[[i]] <- if (i %in% old_names && is.list(.subset2(old, i)) && is.list(.subset2(new, i))) {
update_list(.subset2(old, i), .subset2(new, i))
} else {
.subset2(new, i)
}
}
old
}
# left_args/right_args takes priority over input to dots
left_args <- if (length(left_args) == 0L) args else modify_list(args, left_args)
right_args <- if (length(right_args) == 0L) args else modify_list(args, right_args)
}
left_args$label_hjust <- left_args$label_hjust %||% 1
left_args$header_hjust <- left_args$header_hjust %||% 0
right_args$label_hjust <- right_args$label_hjust %||% 0.5
right_args$header_hjust <- right_args$header_hjust %||% 0.5
p$theme$plot.margin <- plot_margin
left_args$p <- right_args$p <- p
left_args$cols <- left_cols
right_args$cols <- right_cols
right <- do.call(plot_column_table, right_args)
left <- do.call(plot_column_table, left_args)
#p$theme$plot.margin <- plot_margin
titles <- lapply(c(right, left), function(x) x$theme$plot.title)
titles <- titles[lengths(titles, use.names = FALSE) > 0L]
title_sizes <- vapply(titles, function(x) x$size %||% 0L, numeric(1), USE.NAMES = FALSE)
titles <- titles[[which.max(title_sizes)]]
if (is.null(p$theme$plot.title)) {
p$theme$plot.title <- titles
} else {
p$theme$plot.title$size <- titles$size
}
patchwork::wrap_plots(c(left, list(p), right), widths = widths)
}
# Example -----------------------------------------------------------------
df <- read_excel_sheets("meta-analysis template_pregnancy", merge = FALSE) %>%
lapply(function(x) {
names(x) <- clean_names(tolower(names(x)))
x
})
# Efficacy
df <- df$`Pregnancy RSV VE` %>%
meta_analyze_ve() %>%
meta2df() %>%
mutate(
study_label = factor(ifelse(is_meta, "Random effects", study_label)),
study_label = .fct_reorder(study_label, is_meta, .increasing = FALSE)
)
df %>%
plot_forest(
estimate = "adjusted_estimate",
lower = "adjusted_lower_ci",
upper = "adjusted_upper_ci",
y_var = "study_label",
point_color_var = "is_meta",
point_color = c("grey90", "maroon3"),
x_axis_title = "Vaccine effectiveness (%)",
aspect_ratio = 0.75
) %>%
add_column_table(right_cols = list("VE (95% CI)" = ".estimate_label"))
df %>%
plot_forest(
estimate = "adjusted_estimate",
lower = "adjusted_lower_ci",
upper = "adjusted_upper_ci",
y_var = "study_label",
point_color_var = "is_meta",
point_color = c("#333333", "maroon3"),
x_axis_title = "Vaccine effectiveness (%)",
aspect_ratio = 0.75,
y_axis_labels = NULL,
) %>%
add_column_table(
right_cols = list("VE (95% CI)" = ".estimate_label"),
left_cols = list(Study = ".y_var"),
left_args = list(label_hjust = 1)
)
p <- last_plot()
p
p + geom_stripes(even = "#CD000050")
p + geom_stripes(odd = "#CD000050")
redoc()
p + geom_stripes(odd = c("#CD000050", "green"))
p + geom_stripes(odd = c("#CD000050", "green", "blue", "orange"))
redoc()
p
p + geom_stripes(odd = c("#CD000050", "white", "white", "white"))
p + geom_stripes(even = c("#CD000050", "white", "white", "white"))
p + geom_stripes(odd = c("#CD000050", "white", "white", "white"))
p + geom_stripes(aes(odd = c("#CD000050", "white", "white", "white")))
p + geom_stripes(aes(odd = c("#CD000050", "white", "white", "white")))
p$data
redoc()
p
p + geom_stripes(aes(odd = c("#CD000050", "white", "white", "white")))
data
odd
Geom$setup_data
redoc()
p + geom_stripes(aes(odd = c("#CD000050", "white", "white", "white")))
params
data
redoc()
p + geom_stripes(aes(odd = c("#CD000050", "white", "white", "white")))
panel_params
panel_params %>% names
panel_params$guides$aesthetics
panel_params$guides
coord
data
if (direction == "horizontal") {
axis <- "x"
axis_min <- "xmin"
axis_max <- "xmax"
position <- "y.sec"
opposite <- "y"
opposite_min <- "ymin"
opposite_max <- "ymax"
} else {
axis <- "y"
axis_min <- "ymin"
axis_max <- "ymax"
position <- "x.sec"
opposite <- "x"
opposite_min <- "xmin"
opposite_max <- "xmax"
}
z <- seq_len(n_breaks %||% attributes(panel_params[[position]]$breaks)$pos)
data <- merge(data, vec2df(opposite = z, .col_names = opposite), by = opposite, all = TRUE, sort = FALSE)
Geom$setup_data
p + geom_stripes(odd = c("#CD000050", "white", "white", "white"))
data
seq_len(nrow(data)) %% 2L == 1L
redoc()
p + geom_stripes(odd = c("#CD000050", "white", "white", "white"))
data
redoc()
p + geom_stripes(odd = c("#CD000050", "white", "white", "white"))
data
redoc()
p + geom_stripes(odd = c("#CD000050", "white", "white", "white"))
data
first_nna(.subset2(data, axis_min))
first_nna(.subset2(data, "odd"))
redoc()
p + geom_stripes(odd = c("#CD000050", "white", "white", "white"))
p + geom_stripes(odd = c("#CD000050", "#00000000", "#00000000", "#00000000"))
redoc()
p + geom_stripes(odd = c("#CD000050", "#00000000", "#00000000", "#00000000"))
data
o()
abers:::document_addins()
install_and_restart
redoc
RM()
rs()
document_addins()
